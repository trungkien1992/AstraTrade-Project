{
  "overall_summary": {
    "total_tests": 5,
    "successful_tests": 5,
    "success_rate": 1.0,
    "avg_citation_accuracy": 0.14357142857142857,
    "avg_source_attribution": 0.8,
    "avg_confidence_score": 0.3168627450980392,
    "avg_precision": 0.1,
    "avg_recall": 0.14357142857142857,
    "avg_f1_score": 0.1168627450980392,
    "total_expected_citations": 32,
    "total_actual_citations": 50,
    "citation_coverage": 1.5625
  },
  "test_results": [
    {
      "query": "How to place orders on Extended Exchange?",
      "document_id": "extended_exchange_trading",
      "expected_citations": [
        "POST /api/v1/orders",
        "symbol: Trading pair",
        "side: buy or sell",
        "API key authentication",
        "HMAC-SHA256"
      ],
      "actual_citations": [
        "To place an order on Extended Exchange, use the following endpoint:",
        "POST /api/v1/orders",
        "symbol: Trading pair (e.g., BTC/USDT)",
        " symbol:",
        " side:",
        " type:",
        " quantity:",
        "price: Order price (for limit orders)",
        " price:",
        "\"symbol\": \"BTC/USDT\","
      ],
      "citation_accuracy": 0.2,
      "source_attribution": 0.8,
      "confidence_score": 0.33333333333333337,
      "precision": 0.1,
      "recall": 0.2,
      "f1_score": 0.13333333333333333,
      "success": true,
      "error": null
    },
    {
      "query": "How to create a wallet with Starknet.dart?",
      "document_id": "starknet_dart_wallet",
      "expected_citations": [
        "generateKeyPair()",
        "Account(",
        "calculateContractAddress",
        "JsonRpcProvider",
        "StatefulWidget"
      ],
      "actual_citations": [
        "To create a wallet using Starknet.dart SDK:",
        "To create a wallet using Starknet.dart SDK:",
        "import 'package:starknet/starknet.dart';",
        "import 'package:",
        "// Generate new keypair",
        "final keyPair = generateKeyPair();",
        "// Create account",
        "final account = Account(",
        "address: calculateContractAddress(keyPair.publicKey),",
        "address:"
      ],
      "citation_accuracy": 0.0,
      "source_attribution": 0.8,
      "confidence_score": 0.2,
      "precision": 0.0,
      "recall": 0.0,
      "f1_score": 0,
      "success": true,
      "error": null
    },
    {
      "query": "How to write ERC20 token in Cairo?",
      "document_id": "cairo_smart_contract",
      "expected_citations": [
        "#[starknet::contract]",
        "felt252",
        "LegacyMap",
        "#[constructor]",
        "#[external(v0)]",
        "scarb build",
        "starknet deploy"
      ],
      "actual_citations": [
        "use starknet:",
        "name:",
        "symbol:",
        "total_supply:",
        "balances:",
        "fn constructor(",
        "ref self:",
        "name:",
        "symbol:",
        "initial_supply:"
      ],
      "citation_accuracy": 0.0,
      "source_attribution": 0.8,
      "confidence_score": 0.2,
      "precision": 0.0,
      "recall": 0.0,
      "f1_score": 0,
      "success": true,
      "error": null
    },
    {
      "query": "How to authenticate with X10 Python SDK?",
      "document_id": "x10_python_authentication",
      "expected_citations": [
        "pip install x10-python-sdk",
        "from x10_sdk import TradingClient",
        "TradingClient(",
        "authenticate_with_api_key",
        "authenticate_with_oauth2",
        "get_account_balance()",
        "place_order("
      ],
      "actual_citations": [
        "from x10_sdk import TradingClient",
        "client = TradingClient(",
        "base_url=\"https://api.x10.com\"",
        "base_url=\"https:",
        "The SDK supports multiple authentication methods:",
        "client.authenticate_with_api_key(",
        "client.authenticate_with_oauth2(",
        "balance = await client.get_account_balance()",
        "print(f\"Balance: {balance}\")",
        "print(f\"Balance:"
      ],
      "citation_accuracy": 0.14285714285714285,
      "source_attribution": 0.8,
      "confidence_score": 0.3176470588235294,
      "precision": 0.1,
      "recall": 0.14285714285714285,
      "f1_score": 0.11764705882352941,
      "success": true,
      "error": null
    },
    {
      "query": "How to integrate Web3Auth?",
      "document_id": "web3auth_integration",
      "expected_citations": [
        "npm install @web3auth/modal",
        "import { Web3Auth }",
        "new Web3Auth({",
        "clientId:",
        "chainConfig:",
        "initModal()",
        "connect()",
        "getUserInfo()"
      ],
      "actual_citations": [
        "npm install @web3auth/modal",
        "import { Web3Auth } from \"@web3auth/modal\";",
        "const web3auth = new Web3Auth({",
        "clientId:",
        "chainConfig:",
        "chainNamespace:",
        "chainId:",
        "rpcTarget: \"https://mainnet.infura.io/v3/yourkey\"",
        "rpcTarget:",
        "// Initialize modal"
      ],
      "citation_accuracy": 0.375,
      "source_attribution": 0.8,
      "confidence_score": 0.5333333333333332,
      "precision": 0.3,
      "recall": 0.375,
      "f1_score": 0.33333333333333326,
      "success": true,
      "error": null
    }
  ],
  "metadata": {
    "test_date": "2025-07-12 07:19:43",
    "test_type": "citation_accuracy_testing",
    "test_cases": [
      "extended_exchange_trading",
      "starknet_dart_wallet",
      "cairo_smart_contract",
      "x10_python_authentication",
      "web3auth_integration"
    ],
    "platforms_tested": [
      "cairo_lang",
      "extended_exchange",
      "x10_python_sdk",
      "web3auth",
      "starknet_dart"
    ],
    "citation_metrics": [
      "Citation accuracy",
      "Source attribution",
      "Precision",
      "Recall",
      "F1 score",
      "Confidence score"
    ]
  }
}