{
  "what_changed": "Security implementation",
  "code_changes": "diff --git a/knowledge_base/backend/config.py b/knowledge_base/backend/config.py\nindex 94b5786..6d68458 100644\n--- a/knowledge_base/backend/config.py\n+++ b/knowledge_base/backend/config.py\n@@ -6 +6,61 @@ Configuration module for AstraTrade RAG system\n-# Configuration - Enhanced for AstraTrade with RAGFlow features\n+from typing import List\n+from pydantic import Field\n+from pydantic_settings import BaseSettings, SettingsConfigDict\n+\n+\n+class RAGSettings(BaseSettings):\n+    \"\"\"AstraTrade RAG system settings with environment variable support\"\"\"\n+    \n+    # Core configuration\n+    chroma_db_path: str = Field(default=\"../system/chroma_db\", description=\"Path to ChromaDB storage\")\n+    collection_name: str = Field(default=\"astratrade_knowledge_base\", description=\"ChromaDB collection name\")\n+    embedding_model: str = Field(default=\"sentence-transformers/all-MiniLM-L6-v2\", description=\"Embedding model name\")\n+    \n+    # Security\n+    api_key: str = Field(description=\"API key for securing endpoints\")\n+    \n+    # Chunking configuration\n+    chunk_size: int = Field(default=4000, description=\"Text chunk size for processing\")\n+    chunk_overlap: int = Field(default=800, description=\"Overlap between chunks\")\n+    \n+    # Search configuration\n+    max_results: int = Field(default=15, description=\"Maximum search results\")\n+    similarity_threshold: float = Field(default=0.7, description=\"Minimum similarity threshold\")\n+    \n+    # Claude-specific configuration\n+    claude_context_size: int = Field(default=8000, description=\"Special large chunks for Claude\")\n+    \n+    # RAGFlow-inspired features\n+    code_aware_chunking: bool = Field(default=True, description=\"Enable intelligent code chunking\")\n+    template_chunking: bool = Field(default=True, description=\"RAGFlow-inspired template chunking\")\n+    grounded_citations: bool = Field(default=True, description=\"RAGFlow-inspired grounded citations\")\n+    quality_threshold: float = Field(default=0.7, description=\"Quality assessment threshold\")\n+    deep_doc_understanding: bool = Field(default=True, description=\"RAGFlow-inspired deep document understanding\")\n+    multi_modal_support: bool = Field(default=True, description=\"Support for heterogeneous data sources\")\n+    \n+    # Supported platforms\n+    platforms: List[str] = Field(\n+        default=[\n+            \"extended_exchange\",\n+            \"x10_python_sdk\", \n+            \"starknet_dart\",\n+            \"cairo_lang\",\n+            \"avnu_paymaster\",\n+            \"web3auth\",\n+            \"chipi_pay\"\n+        ],\n+        description=\"AstraTrade supported platforms\"\n+    )\n+    \n+    model_config = SettingsConfigDict(\n+        env_file=\".env\",\n+        env_file_encoding=\"utf-8\",\n+        case_sensitive=False,\n+        extra=\"ignore\"\n+    )\n+\n+\n+# Global settings instance\n+settings = RAGSettings()\n+\n+# Backward compatibility - create dictionary for existing code\n@@ -8,23 +68,15 @@ RAG_CONFIG = {\n-    \"chroma_db_path\": \"../system/chroma_db\",\n-    \"collection_name\": \"astratrade_knowledge_base\",\n-    \"embedding_model\": \"sentence-transformers/all-MiniLM-L6-v2\",\n-    \"chunk_size\": 4000,              # Increased from 1000 for better Claude context\n-    \"chunk_overlap\": 800,            # Increased from 200 for better context continuity\n-    \"max_results\": 15,               # Increased from 10 for more comprehensive results\n-    \"similarity_threshold\": 0.7,\n-    \"claude_context_size\": 8000,     # Special large chunks for Claude\n-    \"code_aware_chunking\": True,     # Enable intelligent code chunking\n-    \"template_chunking\": True,       # RAGFlow-inspired template chunking\n-    \"grounded_citations\": True,      # RAGFlow-inspired grounded citations\n-    \"quality_threshold\": 0.7,        # Quality assessment threshold\n-    \"deep_doc_understanding\": True,  # RAGFlow-inspired deep document understanding\n-    \"multi_modal_support\": True,     # Support for heterogeneous data sources\n-    \"platforms\": [                   # AstraTrade supported platforms\n-        \"extended_exchange\",\n-        \"x10_python_sdk\", \n-        \"starknet_dart\",\n-        \"cairo_lang\",\n-        \"avnu_paymaster\",\n-        \"web3auth\",\n-        \"chipi_pay\"\n-    ]\n+    \"chroma_db_path\": settings.chroma_db_path,\n+    \"collection_name\": settings.collection_name,\n+    \"embedding_model\": settings.embedding_model,\n+    \"chunk_size\": settings.chunk_size,\n+    \"chunk_overlap\": settings.chunk_overlap,\n+    \"max_results\": settings.max_results,\n+    \"similarity_threshold\": settings.similarity_threshold,\n+    \"claude_context_size\": settings.claude_context_size,\n+    \"code_aware_chunking\": settings.code_aware_chunking,\n+    \"template_chunking\": settings.template_chunking,\n+    \"grounded_citations\": settings.grounded_citations,\n+    \"quality_threshold\": settings.quality_threshold,\n+    \"deep_doc_understanding\": settings.deep_doc_understanding,\n+    \"multi_modal_support\": settings.multi_modal_support,\n+    \"platforms\": settings.platforms\ndiff --git a/knowledge_base/backend/main.py b/knowledge_base/backend/main.py\nindex 6452eaf..a02f114 100644\n--- a/knowledge_base/backend/main.py\n+++ b/knowledge_base/backend/main.py\n@@ -21 +21 @@ from langchain.text_splitter import RecursiveCharacterTextSplitter\n-from fastapi import FastAPI, HTTPException, BackgroundTasks, Request\n+from fastapi import FastAPI, HTTPException, BackgroundTasks, Request, Depends\n@@ -26 +26 @@ import uvicorn\n-from config import RAG_CONFIG\n+from config import RAG_CONFIG, settings\n@@ -28,0 +29 @@ from rag_system import AstraTradeRAG\n+from security import get_api_key\n@@ -94 +95 @@ async def root():\n-@app.post(\"/index\", response_model=IndexResponse)\n+@app.post(\"/index\", response_model=IndexResponse, dependencies=[Depends(get_api_key)])\n@@ -96 +97 @@ async def index_documentation(request: IndexRequest, background_tasks: Backgroun\n-    \"\"\"Index SDK documentation\"\"\"\n+    \"\"\"Index SDK documentation - Requires API key\"\"\"\n@@ -226 +227 @@ async def get_search_suggestions(query: str = \"\"):\n-@app.post(\"/optimize\")\n+@app.post(\"/optimize\", dependencies=[Depends(get_api_key)])\n@@ -228,2 +229,2 @@ async def optimize_system(background_tasks: BackgroundTasks):\n-    \"\"\"Trigger system optimization\"\"\"\n-    background_tasks.add_task(optimize_rag_system, rag_system.chroma_client, RAG_CONFIG[\"collection_name\"])\n+    \"\"\"Trigger system optimization - Requires API key\"\"\"\n+    background_tasks.add_task(optimize_rag_system, rag_system.chroma_client, settings.collection_name)\ndiff --git a/knowledge_base/backend/requirements.txt b/knowledge_base/backend/requirements.txt\nnew file mode 100644\nindex 0000000..d555306\n--- /dev/null\n+++ b/knowledge_base/backend/requirements.txt\n@@ -0,0 +1,9 @@\n+fastapi==0.104.1\n+uvicorn==0.24.0\n+pydantic==2.5.0\n+pydantic-settings==2.1.0\n+chromadb==0.4.15\n+sentence-transformers==2.2.2\n+langchain==0.0.350\n+requests==2.31.0\n+python-multipart==0.0.6\n\\ No newline at end of file\ndiff --git a/knowledge_base/backend/security.py b/knowledge_base/backend/security.py\nnew file mode 100644\nindex 0000000..bef4806\n--- /dev/null\n+++ b/knowledge_base/backend/security.py\n@@ -0,0 +1,43 @@\n+#!/usr/bin/env python3\n+\"\"\"\n+Security module for AstraTrade RAG system\n+\"\"\"\n+\n+from fastapi import HTTPException, Security\n+from fastapi.security import APIKeyHeader\n+from config import settings\n+\n+# API Key header configuration\n+api_key_header = APIKeyHeader(name=\"X-API-KEY\", auto_error=False)\n+\n+\n+async def get_api_key(api_key: str = Security(api_key_header)) -> str:\n+    \"\"\"\n+    Validate API key from X-API-KEY header\n+    \n+    Args:\n+        api_key: API key from request header\n+        \n+    Returns:\n+        str: Validated API key\n+        \n+    Raises:\n+        HTTPException: If API key is missing or invalid\n+    \"\"\"\n+    if not api_key:\n+        raise HTTPException(\n+            status_code=403,\n+            detail=\"API key is required. Please provide X-API-KEY header.\"\n+        )\n+    \n+    if api_key != settings.api_key:\n+        raise HTTPException(\n+            status_code=403,\n+            detail=\"Invalid API key. Access denied.\"\n+        )\n+    \n+    return api_key\n+\n+\n+# Dependency for securing endpoints\n+secure_endpoint = Security(get_api_key)\n\\ No newline at end of file",
  "metadata": {
    "type": "commit",
    "special_code": "bac855c975e0e66610f74eaa1dd3fceaed5c6531",
    "author": "Peter",
    "date": "2025-07-11 19:15:02 +0700"
  }
}